'''
不同时间跨度的任务，选择所有任务中赚钱最多的组合，最后输出钱数
'''

def out_money():
    priv=[0,0,0,1,0,2,3,5] #做任务i后前面可以做的任务编号
    opt=[0]*(len(priv)+1) #初始化dp算法的状态，opt[i]表示在做第i个任务时累计最大收益，初始化为0
    money=[5,1,8,4,6,3,2,4] #表示每个任务可以赚的钱数
    for i,val in enumerate(money):
        opt[i+1]=max(opt[i],val+opt[priv[i]])  #对于最大化钱数的问题，当前任务有两种状态，做或者不做
        #如果做当前任务，那么最大收益就是当前任务收益+这个任务之前可以做的累计收益
        #如果不做这个任务 ，那么当前状态的收益就是前一个任务的累计收益
    return opt[-1]
print(out_money())